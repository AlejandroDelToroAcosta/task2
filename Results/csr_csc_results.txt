"C:\Program Files\Java\jdk-17\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=52002:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\aadel\Desktop\GCID\Tercero\BD\SecondAssignment\untitled\target\test-classes;C:\Users\aadel\Desktop\GCID\Tercero\BD\SecondAssignment\untitled\target\classes;C:\Users\aadel\.m2\repository\org\openjdk\jmh\jmh-core\1.35\jmh-core-1.35.jar;C:\Users\aadel\.m2\repository\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\aadel\.m2\repository\org\apache\commons\commons-math3\3.2\commons-math3-3.2.jar;C:\Users\aadel\.m2\repository\org\openjdk\jmh\jmh-generator-annprocess\1.35\jmh-generator-annprocess-1.35.jar org.openjdk.jmh.Main "benchmark.CSCBenchmark.*"
# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=52002:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.CSCBenchmark.benchmarkCSCMultiplication
# Parameters: (matrixSize = 100)

# Run progress: 0,00% complete, ETA 00:00:24
# Fork: 1 of 1
# Warmup Iteration   1: 2,144 ms/op
# Warmup Iteration   2: 1,850 ms/op
# Warmup Iteration   3: 1,568 ms/op
Iteration   1: 1,722 ms/op
Iteration   2: 1,859 ms/op
Iteration   3: 1,526 ms/op
Iteration   4: 1,527 ms/op
Iteration   5: 1,597 ms/op


Result "benchmark.CSCBenchmark.benchmarkCSCMultiplication":
  1,646 ±(99.9%) 0,552 ms/op [Average]
  (min, avg, max) = (1,526, 1,646, 1,859), stdev = 0,143
  CI (99.9%): [1,095, 2,198] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=52002:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.CSCBenchmark.benchmarkCSCMultiplication
# Parameters: (matrixSize = 500)

# Run progress: 33,33% complete, ETA 00:00:18
# Fork: 1 of 1
# Warmup Iteration   1: 210,161 ms/op
# Warmup Iteration   2: 178,538 ms/op
# Warmup Iteration   3: 185,194 ms/op
Iteration   1: 184,683 ms/op
Iteration   2: 172,152 ms/op
Iteration   3: 172,013 ms/op
Iteration   4: 203,916 ms/op
Iteration   5: 137,861 ms/op


Result "benchmark.CSCBenchmark.benchmarkCSCMultiplication":
  174,125 ±(99.9%) 92,784 ms/op [Average]
  (min, avg, max) = (137,861, 174,125, 203,916), stdev = 24,096
  CI (99.9%): [81,341, 266,909] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=52002:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.CSCBenchmark.benchmarkCSCMultiplication
# Parameters: (matrixSize = 1024)

# Run progress: 66,67% complete, ETA 00:00:09
# Fork: 1 of 1
# Warmup Iteration   1: 1481,417 ms/op
# Warmup Iteration   2: 1707,974 ms/op
# Warmup Iteration   3: 1435,545 ms/op
Iteration   1: 1766,371 ms/op
Iteration   2: 1497,621 ms/op
Iteration   3: 1596,829 ms/op
Iteration   4: 1829,058 ms/op
Iteration   5: 1550,178 ms/op


Result "benchmark.CSCBenchmark.benchmarkCSCMultiplication":
  1648,011 ±(99.9%) 549,966 ms/op [Average]
  (min, avg, max) = (1497,621, 1648,011, 1829,058), stdev = 142,824
  CI (99.9%): [1098,045, 2197,978] (assumes normal distribution)


# Run complete. Total time: 00:00:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                (matrixSize)  Mode  Cnt     Score     Error  Units
CSCBenchmark.benchmarkCSCMultiplication           100  avgt    5     1,646 ±   0,552  ms/op
CSCBenchmark.benchmarkCSCMultiplication           500  avgt    5   174,125 ±  92,784  ms/op
CSCBenchmark.benchmarkCSCMultiplication          1024  avgt    5  1648,011 ± 549,966  ms/op

Process finished with exit code 0

------------------------------------------------------------------------



este es el resultado para csr:"C:\Program Files\Java\jdk-17\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=51953:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\aadel\Desktop\GCID\Tercero\BD\SecondAssignment\untitled\target\test-classes;C:\Users\aadel\Desktop\GCID\Tercero\BD\SecondAssignment\untitled\target\classes;C:\Users\aadel\.m2\repository\org\openjdk\jmh\jmh-core\1.35\jmh-core-
1.35.jar;C:\Users\aadel\.m2\repository\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\aadel\.m2\repository\org\apache\commons\commons-math3\3.2\commons-math3-3.2.jar;C:\Users\aadel\.m2\repository\org\openjdk\jmh\jmh-generator-annprocess\1.35\jmh-generator-annprocess-1.35.jar org.openjdk.jmh.Main "benchmark.CSRBenchmark.*"
# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=51953:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.CSRBenchmark.benchmarkCSRMultiplication
# Parameters: (matrixSize = 100)

# Run progress: 0,00% complete, ETA 00:00:24
# Fork: 1 of 1
# Warmup Iteration   1: 1,879 ms/op
# Warmup Iteration   2: 1,650 ms/op
# Warmup Iteration   3: 1,659 ms/op
Iteration   1: 1,762 ms/op
Iteration   2: 1,684 ms/op
Iteration   3: 2,169 ms/op
Iteration   4: 1,917 ms/op
Iteration   5: 1,746 ms/op


Result "benchmark.CSRBenchmark.benchmarkCSRMultiplication":
  1,855 ±(99.9%) 0,751 ms/op [Average]
  (min, avg, max) = (1,684, 1,855, 2,169), stdev = 0,195
  CI (99.9%): [1,104, 2,606] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=51953:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.CSRBenchmark.benchmarkCSRMultiplication
# Parameters: (matrixSize = 500)

# Run progress: 33,33% complete, ETA 00:00:18
# Fork: 1 of 1
# Warmup Iteration   1: 188,527 ms/op
# Warmup Iteration   2: 180,169 ms/op
# Warmup Iteration   3: 168,096 ms/op
Iteration   1: 169,734 ms/op
Iteration   2: 199,129 ms/op
Iteration   3: 178,982 ms/op
Iteration   4: 180,901 ms/op
Iteration   5: 179,119 ms/op


Result "benchmark.CSRBenchmark.benchmarkCSRMultiplication":
  181,573 ±(99.9%) 41,364 ms/op [Average]
  (min, avg, max) = (169,734, 181,573, 199,129), stdev = 10,742
  CI (99.9%): [140,209, 222,937] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=51953:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.CSRBenchmark.benchmarkCSRMultiplication
# Parameters: (matrixSize = 1024)

# Run progress: 66,67% complete, ETA 00:00:09
# Fork: 1 of 1
# Warmup Iteration   1: 1437,301 ms/op
# Warmup Iteration   2: 1768,229 ms/op
# Warmup Iteration   3: 1811,121 ms/op
Iteration   1: 1548,181 ms/op
Iteration   2: 1640,748 ms/op
Iteration   3: 2066,026 ms/op
Iteration   4: 1634,165 ms/op
Iteration   5: 1504,161 ms/op


Result "benchmark.CSRBenchmark.benchmarkCSRMultiplication":
  1678,656 ±(99.9%) 863,060 ms/op [Average]
  (min, avg, max) = (1504,161, 1678,656, 2066,026), stdev = 224,134
  CI (99.9%): [815,596, 2541,716] (assumes normal distribution)


# Run complete. Total time: 00:00:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                (matrixSize)  Mode  Cnt     Score     Error  Units
CSRBenchmark.benchmarkCSRMultiplication           100  avgt    5     1,855 ±   0,751  ms/op
CSRBenchmark.benchmarkCSRMultiplication           500  avgt    5   181,573 ±  41,364  ms/op
CSRBenchmark.benchmarkCSRMultiplication          1024  avgt    5  1678,656 ± 863,060  ms/op

Process finished with exit code 0

---------------------------------------------------------------

"C:\Program Files\Java\jdk-17\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54849:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\aadel\Desktop\GCID\Tercero\BD\Ind.Assignments\MatrixOptimization\target\test-classes;C:\Users\aadel\Desktop\GCID\Tercero\BD\Ind.Assignments\MatrixOptimization\target\classes;C:\Users\aadel\.m2\repository\org\openjdk\jmh\jmh-core\1.35\jmh-core-1.35.jar;C:\Users\aadel\.m2\repository\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\aadel\.m2\repository\org\apache\commons\commons-math3\3.2\commons-math3-3.2.jar;C:\Users\aadel\.m2\repository\org\openjdk\jmh\jmh-generator-annprocess\1.35\jmh-generator-annprocess-1.35.jar org.openjdk.jmh.Main "benchmark.CSRBenchmarkWilliam.*"
# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=54849:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 1 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.CSRBenchmarkWilliam.benchmarkMatrixMultiplication

# Run progress: 0,00% complete, ETA 00:00:10
# Fork: 1 of 1
Iteration   1: 334983,904 ms/op


Result "benchmark.CSRBenchmarkWilliam.benchmarkMatrixMultiplication":
  334983,904 ms/op


# Run complete. Total time: 00:05:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                          Mode  Cnt       Score   Error  Units
CSRBenchmarkWilliam.benchmarkMatrixMultiplication  avgt       334983,904          ms/op

Process finished with exit code 0
